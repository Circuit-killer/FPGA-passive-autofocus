// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   fyq14@EEWS104A-004
//  Generated date: Tue May 12 09:36:16 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    mouse_buffer_core
// ------------------------------------------------------------------


module mouse_buffer_core (
  clk, en, arst_n, input_x_rsc_mgc_in_wire_d, input_y_rsc_mgc_in_wire_d, output_x_rsc_mgc_out_stdreg_d,
      output_y_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [9:0] input_x_rsc_mgc_in_wire_d;
  input [9:0] input_y_rsc_mgc_in_wire_d;
  output [9:0] output_x_rsc_mgc_out_stdreg_d;
  output [9:0] output_y_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  reg [9:0] previous_x_sva;
  reg [9:0] previous_y_sva;
  wire [11:0] calculate_coordinate_1_tmp_acc_psp_sva_1;
  wire [12:0] nl_calculate_coordinate_1_tmp_acc_psp_sva_1;
  wire [11:0] calculate_coordinate_tmp_acc_psp_sva_1;
  wire [12:0] nl_calculate_coordinate_tmp_acc_psp_sva_1;
  reg [8:0] reg_output_y_rsc_mgc_out_stdreg_d_cse;
  reg [9:0] reg_output_x_rsc_mgc_out_stdreg_d_cse;
  wire [11:0] calculate_coordinate_delta_acc_1_itm;
  wire [12:0] nl_calculate_coordinate_delta_acc_1_itm;
  wire [11:0] calculate_coordinate_1_delta_acc_1_itm;
  wire [12:0] nl_calculate_coordinate_1_delta_acc_1_itm;
  wire [9:0] calculate_coordinate_else_1_if_acc_itm;
  wire [10:0] nl_calculate_coordinate_else_1_if_acc_itm;
  wire [6:0] calculate_coordinate_1_else_1_if_acc_itm;
  wire [7:0] nl_calculate_coordinate_1_else_1_if_acc_itm;
  wire [11:0] calculate_coordinate_1_acc_1_itm;
  wire [12:0] nl_calculate_coordinate_1_acc_1_itm;
  wire [10:0] calculate_coordinate_1_acc_itm;
  wire [11:0] nl_calculate_coordinate_1_acc_itm;
  wire [11:0] calculate_coordinate_acc_1_itm;
  wire [12:0] nl_calculate_coordinate_acc_1_itm;
  wire [10:0] calculate_coordinate_acc_itm;
  wire [11:0] nl_calculate_coordinate_acc_itm;

  wire[9:0] calculate_coordinate_mux_nl;
  wire[9:0] calculate_coordinate_1_mux_nl;
  wire[9:0] mux_1_nl;
  wire[9:0] mux_nl;

  // Interconnect Declarations for Component Instantiations 
  assign output_y_rsc_mgc_out_stdreg_d = {1'b0, reg_output_y_rsc_mgc_out_stdreg_d_cse};
  assign output_x_rsc_mgc_out_stdreg_d = reg_output_x_rsc_mgc_out_stdreg_d_cse;
  assign nl_calculate_coordinate_delta_acc_1_itm = conv_u2s_11_12({input_x_rsc_mgc_in_wire_d
      , 1'b1}) + ({1'b1 , (~ previous_x_sva) , 1'b1});
  assign calculate_coordinate_delta_acc_1_itm = nl_calculate_coordinate_delta_acc_1_itm[11:0];
  assign calculate_coordinate_mux_nl = MUX_v_10_2_2({(calculate_coordinate_delta_acc_1_itm[11:2])
      , (signext_10_1(~ (calculate_coordinate_delta_acc_1_itm[11])))}, calculate_coordinate_acc_itm[10]);
  assign nl_calculate_coordinate_tmp_acc_psp_sva_1 = conv_u2s_10_12(reg_output_x_rsc_mgc_out_stdreg_d_cse)
      + conv_s2s_11_12({(calculate_coordinate_mux_nl) , ((calculate_coordinate_delta_acc_1_itm[1])
      | (calculate_coordinate_acc_itm[10]))});
  assign calculate_coordinate_tmp_acc_psp_sva_1 = nl_calculate_coordinate_tmp_acc_psp_sva_1[11:0];
  assign nl_calculate_coordinate_else_1_if_acc_itm = ({1'b1 , (~ (calculate_coordinate_tmp_acc_psp_sva_1[10:2]))})
      + 10'b10101011;
  assign calculate_coordinate_else_1_if_acc_itm = nl_calculate_coordinate_else_1_if_acc_itm[9:0];
  assign nl_calculate_coordinate_1_delta_acc_1_itm = conv_u2s_11_12({input_y_rsc_mgc_in_wire_d
      , 1'b1}) + ({1'b1 , (~ previous_y_sva) , 1'b1});
  assign calculate_coordinate_1_delta_acc_1_itm = nl_calculate_coordinate_1_delta_acc_1_itm[11:0];
  assign calculate_coordinate_1_mux_nl = MUX_v_10_2_2({(calculate_coordinate_1_delta_acc_1_itm[11:2])
      , (signext_10_1(~ (calculate_coordinate_1_delta_acc_1_itm[11])))}, calculate_coordinate_1_acc_itm[10]);
  assign nl_calculate_coordinate_1_tmp_acc_psp_sva_1 = conv_u2s_9_12(reg_output_y_rsc_mgc_out_stdreg_d_cse)
      + conv_s2s_11_12({(calculate_coordinate_1_mux_nl) , ((calculate_coordinate_1_delta_acc_1_itm[1])
      | (calculate_coordinate_1_acc_itm[10]))});
  assign calculate_coordinate_1_tmp_acc_psp_sva_1 = nl_calculate_coordinate_1_tmp_acc_psp_sva_1[11:0];
  assign nl_calculate_coordinate_1_else_1_if_acc_itm = ({1'b1 , (~ (calculate_coordinate_1_tmp_acc_psp_sva_1[10:5]))})
      + 7'b1101;
  assign calculate_coordinate_1_else_1_if_acc_itm = nl_calculate_coordinate_1_else_1_if_acc_itm[6:0];
  assign nl_calculate_coordinate_1_acc_1_itm = calculate_coordinate_1_tmp_acc_psp_sva_1
      + 12'b111101111001;
  assign calculate_coordinate_1_acc_1_itm = nl_calculate_coordinate_1_acc_1_itm[11:0];
  assign mux_1_nl = MUX_v_10_2_2({(calculate_coordinate_1_delta_acc_1_itm[10:1])
      , ((~ (calculate_coordinate_1_delta_acc_1_itm[10:1])) + 10'b1)}, calculate_coordinate_1_delta_acc_1_itm[11]);
  assign nl_calculate_coordinate_1_acc_itm = ({1'b1 , (~ (mux_1_nl))}) + 11'b1100101;
  assign calculate_coordinate_1_acc_itm = nl_calculate_coordinate_1_acc_itm[10:0];
  assign nl_calculate_coordinate_acc_1_itm = calculate_coordinate_tmp_acc_psp_sva_1
      + 12'b111100001101;
  assign calculate_coordinate_acc_1_itm = nl_calculate_coordinate_acc_1_itm[11:0];
  assign mux_nl = MUX_v_10_2_2({(calculate_coordinate_delta_acc_1_itm[10:1]) , ((~
      (calculate_coordinate_delta_acc_1_itm[10:1])) + 10'b1)}, calculate_coordinate_delta_acc_1_itm[11]);
  assign nl_calculate_coordinate_acc_itm = ({1'b1 , (~ (mux_nl))}) + 11'b1100101;
  assign calculate_coordinate_acc_itm = nl_calculate_coordinate_acc_itm[10:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_output_y_rsc_mgc_out_stdreg_d_cse <= 9'b0;
      reg_output_x_rsc_mgc_out_stdreg_d_cse <= 10'b0;
      previous_y_sva <= 10'b0;
      previous_x_sva <= 10'b0;
    end
    else begin
      if ( en ) begin
        reg_output_y_rsc_mgc_out_stdreg_d_cse <= MUX1HOT_v_9_3_2({(calculate_coordinate_1_tmp_acc_psp_sva_1[8:0])
            , 9'b110011111 , 9'b10000111}, {(~((calculate_coordinate_1_else_1_if_acc_itm[6])
            | (calculate_coordinate_1_acc_1_itm[11]))) , ((calculate_coordinate_1_else_1_if_acc_itm[6])
            & (~ (calculate_coordinate_1_acc_1_itm[11]))) , (calculate_coordinate_1_acc_1_itm[11])});
        reg_output_x_rsc_mgc_out_stdreg_d_cse <= MUX1HOT_v_10_3_2({(calculate_coordinate_tmp_acc_psp_sva_1[9:0])
            , 10'b1010101011 , 10'b11110011}, {(~((calculate_coordinate_else_1_if_acc_itm[9])
            | (calculate_coordinate_acc_1_itm[11]))) , ((calculate_coordinate_else_1_if_acc_itm[9])
            & (~ (calculate_coordinate_acc_1_itm[11]))) , (calculate_coordinate_acc_1_itm[11])});
        previous_y_sva <= input_y_rsc_mgc_in_wire_d;
        previous_x_sva <= input_x_rsc_mgc_in_wire_d;
      end
    end
  end

  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function [8:0] MUX1HOT_v_9_3_2;
    input [26:0] inputs;
    input [2:0] sel;
    reg [8:0] result;
    integer i;
  begin
    result = inputs[0+:9] & {9{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*9+:9] & {9{sel[i]}});
    MUX1HOT_v_9_3_2 = result;
  end
  endfunction


  function [9:0] MUX1HOT_v_10_3_2;
    input [29:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [11:0] conv_s2s_11_12 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_12 = {vector[10], vector};
  end
  endfunction


  function signed [11:0] conv_u2s_9_12 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_12 = {{3{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mouse_buffer
//  Generated from file(s):
//    3) $PROJECT_HOME/mouse_buffer.c
// ------------------------------------------------------------------


module mouse_buffer (
  input_x_rsc_z, input_y_rsc_z, output_x_rsc_z, output_y_rsc_z, clk, en, arst_n
);
  input [9:0] input_x_rsc_z;
  input [9:0] input_y_rsc_z;
  output [9:0] output_x_rsc_z;
  output [9:0] output_y_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [9:0] input_x_rsc_mgc_in_wire_d;
  wire [9:0] input_y_rsc_mgc_in_wire_d;
  wire [9:0] output_x_rsc_mgc_out_stdreg_d;
  wire [9:0] output_y_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(10)) input_x_rsc_mgc_in_wire (
      .d(input_x_rsc_mgc_in_wire_d),
      .z(input_x_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(10)) input_y_rsc_mgc_in_wire (
      .d(input_y_rsc_mgc_in_wire_d),
      .z(input_y_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(10)) output_x_rsc_mgc_out_stdreg (
      .d(output_x_rsc_mgc_out_stdreg_d),
      .z(output_x_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) output_y_rsc_mgc_out_stdreg (
      .d(output_y_rsc_mgc_out_stdreg_d),
      .z(output_y_rsc_z)
    );
  mouse_buffer_core mouse_buffer_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .input_x_rsc_mgc_in_wire_d(input_x_rsc_mgc_in_wire_d),
      .input_y_rsc_mgc_in_wire_d(input_y_rsc_mgc_in_wire_d),
      .output_x_rsc_mgc_out_stdreg_d(output_x_rsc_mgc_out_stdreg_d),
      .output_y_rsc_mgc_out_stdreg_d(output_y_rsc_mgc_out_stdreg_d)
    );
endmodule



