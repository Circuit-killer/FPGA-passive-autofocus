// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   fyq14@EEWS104A-014
//  Generated date: Thu May 14 14:20:33 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    gradient_based_rotator_core
// ------------------------------------------------------------------


module gradient_based_rotator_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, current_frame_clock_rsc_mgc_in_wire_d,
      start_rsc_mgc_in_wire_d, stop_rsc_mgc_in_wire_d, motor_state_rsc_mgc_out_stdreg_d,
      debug1_rsc_mgc_out_stdreg_d, debug2_rsc_mgc_out_stdreg_d, debug3_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [29:0] vin_rsc_mgc_in_wire_d;
  input current_frame_clock_rsc_mgc_in_wire_d;
  input start_rsc_mgc_in_wire_d;
  input stop_rsc_mgc_in_wire_d;
  output [1:0] motor_state_rsc_mgc_out_stdreg_d;
  reg [1:0] motor_state_rsc_mgc_out_stdreg_d;
  output debug1_rsc_mgc_out_stdreg_d;
  reg debug1_rsc_mgc_out_stdreg_d;
  output debug2_rsc_mgc_out_stdreg_d;
  reg debug2_rsc_mgc_out_stdreg_d;
  output debug3_rsc_mgc_out_stdreg_d;
  reg debug3_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire or_2_tmp;
  wire if_1_case_1_else_1_nand_tmp;
  wire or_dcpl;
  wire or_dcpl_4;
  wire or_dcpl_6;
  wire or_dcpl_30;
  wire and_dcpl_2;
  reg asn_sft_2_lpi_1;
  reg sfi_fsm_state_1_lpi_1;
  reg [31:0] if_1_case_1_slc_1_psp_1_lpi_1;
  reg asn_sft_1_lpi_1;
  reg sfi_if_1_case_1_equal_cse_lpi_1;
  reg [2:0] SHFIT_RIGHT_1_i_1_lpi_1;
  reg [1:0] asn_sft_lpi_1;
  reg sfi_previous_motor_state_lpi_1;
  reg [63:0] current_position_rolling_mean_sva;
  reg [29:0] regs_regs_2_1_sva;
  reg [29:0] regs_regs_3_1_sva;
  reg [29:0] regs_regs_1_1_sva;
  reg [29:0] regs_regs_4_1_sva;
  reg [29:0] regs_regs_0_1_sva;
  reg [29:0] regs_regs_5_1_sva;
  reg [63:0] first_derivative_regs_regs_2_sva;
  reg [63:0] first_derivative_regs_regs_3_sva;
  reg [63:0] first_derivative_regs_regs_1_sva;
  reg [63:0] first_derivative_regs_regs_4_sva;
  reg [63:0] first_derivative_regs_regs_0_sva;
  reg [63:0] first_derivative_regs_regs_5_sva;
  reg fsm_state_1_sva;
  reg exit_SHFIT_RIGHT_1_sva;
  reg else_land_lpi_1_dfm;
  reg [29:0] vin_1_lpi_1_dfm;
  reg asn_sft_3_lpi_1_dfm;
  reg if_1_case_1_if_2_else_slc_svs;
  reg if_1_case_1_nor_m1c;
  reg [31:0] frame_count_sva_4;
  wire [32:0] nl_frame_count_sva_4;
  reg [1:0] previous_motor_state_sva_dfm_6;
  reg [31:0] frame_count_sva_dfm_8;
  reg slc_1_itm_1;
  reg aelse_8_nor_itm_1;
  reg main_stage_0_2;
  reg [2:0] SHIFT_1_i_1_lpi_3;
  wire and_49_cse;
  wire exit_SHFIT_RIGHT_1_sva_dfm_1_mx0;
  wire is_local_maximum_land_lpi_1_dfm_1;
  wire SHFIT_RIGHT_1_if_else_else_and_4_tmp_1;
  wire asn_sft_1_lpi_1_dfm_mx0;
  wire SHIFT_1_if_else_else_and_3_tmp_1;
  wire if_1_case_1_nor_m1c_1;
  wire if_1_case_1_and_3_cse_1;
  wire SHFIT_RIGHT_1_if_else_else_and_3_tmp_1;
  wire SHIFT_1_if_else_else_and_2_tmp_1;
  wire SHFIT_RIGHT_1_if_else_else_and_2_tmp_1;
  wire SHIFT_1_if_else_else_and_1_tmp_1;
  wire SHFIT_RIGHT_1_if_else_else_and_tmp_1;
  wire unequal_tmp_10;
  wire unequal_tmp_11;
  wire sfi_fsm_state_1_lpi_1_dfm_1;
  wire unequal_tmp_12;
  wire if_1_case_1_equal_cse_sva_1;
  wire if_1_and_mx0w0;
  wire [31:0] if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0;
  wire if_1_case_1_else_1_or_mx0w1;
  wire sfi_if_1_case_1_equal_cse_lpi_1_dfm_1;
  wire nor_5;
  wire [2:0] SHFIT_RIGHT_1_i_1_lpi_1_dfm;
  wire [1:0] previous_motor_state_sva_dfm_2_mx0;
  wire [63:0] current_position_rolling_mean_sva_dfm_4;
  wire [2:0] SHIFT_1_i_1_lpi_1_dfm_5_mx0;
  reg reg_exit_SHFIT_RIGHT_1_sva_dfm_5_cse;
  reg reg_previous_frame_clock_sva_cse;
  wire [63:0] mux_92_cse;
  wire or_dcpl_44;
  wire mux_tmp;
  wire or_dcpl_52;
  wire and_dcpl_30;
  wire and_61_cse;
  wire asn_sft_2_lpi_1_dfm_mx0;
  wire if_1_case_1_if_3_not_8;
  wire else_land_lpi_1_dfm_mx0w0;
  wire else_land_lpi_1_dfm_mx0;
  wire [1:0] if_1_next_motor_state_lpi_1_dfm_2;
  wire [29:0] regs_regs_5_1_sva_dfm_2_mx0;
  wire and_45_cse;
  wire [29:0] regs_regs_5_1_sva_dfm_4;
  wire [29:0] regs_regs_4_1_sva_dfm_2_mx0;
  wire [29:0] regs_regs_4_1_sva_dfm_4;
  wire [29:0] regs_regs_3_1_sva_dfm_2_mx0;
  wire [29:0] regs_regs_3_1_sva_dfm_4;
  wire [29:0] regs_regs_2_1_sva_dfm_2_mx0;
  wire [29:0] regs_regs_2_1_sva_dfm_4;
  wire [29:0] regs_regs_1_1_sva_dfm_2_mx0;
  wire [29:0] regs_regs_1_1_sva_dfm_4;
  wire [29:0] regs_regs_0_1_sva_dfm_2_mx0;
  wire [29:0] regs_regs_0_1_sva_dfm_4;
  wire nor_8_m1c;
  wire asn_sft_3_lpi_1_dfm_mx0;
  wire and_96_cse;
  wire and_97_cse;
  wire if_1_default_mux_51_itm;
  wire [2:0] SHFIT_RIGHT_1_acc_itm;
  wire [3:0] nl_SHFIT_RIGHT_1_acc_itm;
  wire [32:0] if_1_case_1_acc_5_itm;
  wire [33:0] nl_if_1_case_1_acc_5_itm;
  wire mux_37_itm;
  wire [31:0] frame_count_sva_dfm_8_mx0;
  wire [63:0] first_derivative_regs_regs_4_sva_mx0;
  wire [63:0] first_derivative_regs_regs_3_sva_mx0;
  wire [63:0] first_derivative_regs_regs_2_sva_mx0;
  wire [63:0] first_derivative_regs_regs_0_sva_mx0;
  wire [29:0] vin_1_lpi_1_dfm_mx0;
  wire [63:0] first_derivative_regs_regs_5_sva_dfm_2_mx0;
  wire [63:0] first_derivative_regs_regs_4_sva_dfm_2_mx0;
  wire [63:0] first_derivative_regs_regs_3_sva_dfm_2_mx0;
  wire [63:0] first_derivative_regs_regs_2_sva_dfm_2_mx0;
  wire [63:0] first_derivative_regs_regs_1_sva_dfm_2_mx0;
  wire [63:0] first_derivative_regs_regs_0_sva_dfm_2_mx0;
  wire [31:0] frame_count_sva_dfm_2_mx0;
  wire [31:0] if_1_case_1_acc_12_sdt;
  wire [32:0] nl_if_1_case_1_acc_12_sdt;
  wire if_1_case_1_nor_6_cse;
  wire if_1_case_1_and_23_cse;
  wire and_stg_4_sva;
  wire [63:0] SHFIT_RIGHT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva;
  wire unequal_tmp_2;
  wire [2:0] SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva;
  wire [3:0] nl_SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva;
  wire [63:0] SHIFT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva;
  wire [3:0] SHIFT_1_i_1_sva_1;
  wire [4:0] nl_SHIFT_1_i_1_sva_1;
  wire [1:0] asn_sft_lpi_1_dfm_mx0;
  wire [63:0] first_derivative_regs_regs_4_sva_dfm_6;
  wire [63:0] first_derivative_regs_regs_0_sva_dfm_6;
  wire if_1_case_1_if_2_else_slc_svs_mx0;
  wire [63:0] first_derivative_regs_regs_2_sva_dfm_6;
  wire [63:0] first_derivative_regs_regs_3_sva_dfm_6;
  wire if_1_case_1_nor_m1c_mx0;
  wire fsm_state_1_sva_dfm_2_mx0;
  wire SHIFT_1_if_else_else_and_4_tmp;
  wire SHIFT_1_if_else_else_and_tmp;
  wire SHFIT_RIGHT_1_if_else_else_and_1_tmp;
  wire and_stg_2_sg1_sva;
  wire and_34_cse;
  wire [30:0] if_1_case_1_acc_26_sdt;
  wire [31:0] nl_if_1_case_1_acc_26_sdt;
  wire or_dcpl_68;
  wire [60:0] if_1_case_1_if_2_else_if_acc_itm;
  wire [61:0] nl_if_1_case_1_if_2_else_if_acc_itm;
  wire [34:0] if_1_case_1_acc_itm;
  wire [36:0] nl_if_1_case_1_acc_itm;
  wire [61:0] if_1_case_1_if_2_else_else_if_acc_itm;
  wire [62:0] nl_if_1_case_1_if_2_else_else_if_acc_itm;

  wire[63:0] mux_145_nl;
  wire[29:0] mux_146_nl;
  wire[29:0] mux_147_nl;
  wire[29:0] mux_148_nl;
  wire[29:0] mux_149_nl;
  wire[29:0] mux_150_nl;
  wire[29:0] mux_151_nl;
  wire[63:0] mux_152_nl;
  wire[63:0] mux_153_nl;
  wire[63:0] mux_154_nl;
  wire[63:0] mux_155_nl;
  wire[63:0] mux_156_nl;
  wire[63:0] mux_157_nl;
  wire[31:0] mux_143_nl;
  wire[1:0] mux_163_nl;
  wire[1:0] mux1h_nl;
  wire[1:0] mux_130_nl;
  wire[0:0] mux_160_nl;

  // Interconnect Declarations for Component Instantiations 
  assign nor_8_m1c = ~(or_dcpl_44 | and_61_cse);
  assign and_96_cse = (~ and_45_cse) & nor_8_m1c;
  assign and_97_cse = and_45_cse & nor_8_m1c;
  assign if_1_default_mux_51_itm = MUX_s_1_2_2({asn_sft_1_lpi_1 , if_1_case_1_equal_cse_sva_1},
      sfi_fsm_state_1_lpi_1_dfm_1);
  assign frame_count_sva_dfm_8_mx0 = (frame_count_sva_dfm_2_mx0 | (signext_32_1(~((~
      mux_tmp) | if_1_case_1_if_3_not_8 | or_dcpl_4)))) & (signext_32_1(~(mux_tmp
      & (~(if_1_case_1_if_3_not_8 | or_dcpl_4)))));
  assign or_2_tmp = exit_SHFIT_RIGHT_1_sva_dfm_1_mx0 | (~ asn_sft_2_lpi_1_dfm_mx0)
      | (~ asn_sft_3_lpi_1_dfm_mx0);
  assign else_land_lpi_1_dfm_mx0w0 = (~ fsm_state_1_sva) & start_rsc_mgc_in_wire_d;
  assign else_land_lpi_1_dfm_mx0 = MUX_s_1_2_2({else_land_lpi_1_dfm_mx0w0 , else_land_lpi_1_dfm},
      stop_rsc_mgc_in_wire_d);
  assign first_derivative_regs_regs_4_sva_mx0 = MUX_v_64_2_2({first_derivative_regs_regs_4_sva_dfm_6
      , first_derivative_regs_regs_4_sva_dfm_2_mx0}, or_dcpl_4);
  assign first_derivative_regs_regs_3_sva_mx0 = MUX_v_64_2_2({first_derivative_regs_regs_3_sva_dfm_6
      , first_derivative_regs_regs_3_sva_dfm_2_mx0}, or_dcpl_4);
  assign first_derivative_regs_regs_2_sva_mx0 = MUX_v_64_2_2({first_derivative_regs_regs_2_sva_dfm_6
      , first_derivative_regs_regs_2_sva_dfm_2_mx0}, or_dcpl_4);
  assign first_derivative_regs_regs_0_sva_mx0 = MUX_v_64_2_2({first_derivative_regs_regs_0_sva_dfm_6
      , first_derivative_regs_regs_0_sva_dfm_2_mx0}, or_dcpl_4);
  assign vin_1_lpi_1_dfm_mx0 = MUX_v_30_2_2({vin_1_lpi_1_dfm , vin_rsc_mgc_in_wire_d},
      exit_SHFIT_RIGHT_1_sva);
  assign mux_145_nl = MUX_v_64_2_2({(signext_64_1(~ or_dcpl_6)) , current_position_rolling_mean_sva},
      or_dcpl_52);
  assign mux_92_cse = (mux_145_nl) & (signext_64_1(~ and_dcpl_30));
  assign mux_146_nl = MUX_v_30_2_2({(signext_30_1(~ or_dcpl_6)) , regs_regs_4_1_sva},
      or_dcpl_52);
  assign regs_regs_4_1_sva_dfm_2_mx0 = (mux_146_nl) & (signext_30_1(~ and_dcpl_30));
  assign mux_147_nl = MUX_v_30_2_2({(signext_30_1(~ or_dcpl_6)) , regs_regs_5_1_sva},
      or_dcpl_52);
  assign regs_regs_5_1_sva_dfm_2_mx0 = (mux_147_nl) & (signext_30_1(~ and_dcpl_30));
  assign mux_148_nl = MUX_v_30_2_2({(signext_30_1(~ or_dcpl_6)) , regs_regs_3_1_sva},
      or_dcpl_52);
  assign regs_regs_3_1_sva_dfm_2_mx0 = (mux_148_nl) & (signext_30_1(~ and_dcpl_30));
  assign mux_149_nl = MUX_v_30_2_2({(signext_30_1(~ or_dcpl_6)) , regs_regs_2_1_sva},
      or_dcpl_52);
  assign regs_regs_2_1_sva_dfm_2_mx0 = (mux_149_nl) & (signext_30_1(~ and_dcpl_30));
  assign mux_150_nl = MUX_v_30_2_2({(signext_30_1(~ or_dcpl_6)) , regs_regs_1_1_sva},
      or_dcpl_52);
  assign regs_regs_1_1_sva_dfm_2_mx0 = (mux_150_nl) & (signext_30_1(~ and_dcpl_30));
  assign mux_151_nl = MUX_v_30_2_2({(signext_30_1(~ or_dcpl_6)) , regs_regs_0_1_sva},
      or_dcpl_52);
  assign regs_regs_0_1_sva_dfm_2_mx0 = (mux_151_nl) & (signext_30_1(~ and_dcpl_30));
  assign mux_152_nl = MUX_v_64_2_2({(signext_64_1(~ or_dcpl_6)) , first_derivative_regs_regs_5_sva},
      or_dcpl_52);
  assign first_derivative_regs_regs_5_sva_dfm_2_mx0 = (mux_152_nl) & (signext_64_1(~
      and_dcpl_30));
  assign mux_153_nl = MUX_v_64_2_2({(signext_64_1(~ or_dcpl_6)) , first_derivative_regs_regs_4_sva},
      or_dcpl_52);
  assign first_derivative_regs_regs_4_sva_dfm_2_mx0 = (mux_153_nl) & (signext_64_1(~
      and_dcpl_30));
  assign mux_154_nl = MUX_v_64_2_2({(signext_64_1(~ or_dcpl_6)) , first_derivative_regs_regs_3_sva},
      or_dcpl_52);
  assign first_derivative_regs_regs_3_sva_dfm_2_mx0 = (mux_154_nl) & (signext_64_1(~
      and_dcpl_30));
  assign mux_155_nl = MUX_v_64_2_2({(signext_64_1(~ or_dcpl_6)) , first_derivative_regs_regs_2_sva},
      or_dcpl_52);
  assign first_derivative_regs_regs_2_sva_dfm_2_mx0 = (mux_155_nl) & (signext_64_1(~
      and_dcpl_30));
  assign mux_156_nl = MUX_v_64_2_2({(signext_64_1(~ or_dcpl_6)) , first_derivative_regs_regs_1_sva},
      or_dcpl_52);
  assign first_derivative_regs_regs_1_sva_dfm_2_mx0 = (mux_156_nl) & (signext_64_1(~
      and_dcpl_30));
  assign mux_157_nl = MUX_v_64_2_2({(signext_64_1(~ or_dcpl_6)) , first_derivative_regs_regs_0_sva},
      or_dcpl_52);
  assign first_derivative_regs_regs_0_sva_dfm_2_mx0 = (mux_157_nl) & (signext_64_1(~
      and_dcpl_30));
  assign mux_143_nl = MUX_v_32_2_2({frame_count_sva_4 , frame_count_sva_dfm_8}, main_stage_0_2
      & (~ reg_exit_SHFIT_RIGHT_1_sva_dfm_5_cse));
  assign frame_count_sva_dfm_2_mx0 = ~(((~((mux_143_nl) & ({{31{main_stage_0_2}},
      main_stage_0_2}))) & ({{31{or_dcpl_52}}, or_dcpl_52})) | ({{31{and_dcpl_30}},
      and_dcpl_30}));
  assign if_1_case_1_else_1_or_mx0w1 = (SHIFT_1_i_1_sva_1[3]) | if_1_case_1_else_1_nand_tmp;
  assign exit_SHFIT_RIGHT_1_sva_dfm_1_mx0 = MUX_s_1_2_2({if_1_case_1_else_1_or_mx0w1
      , (~ (SHFIT_RIGHT_1_acc_itm[2]))}, if_1_default_mux_51_itm);
  assign asn_sft_2_lpi_1_dfm_mx0 = MUX_s_1_2_2({asn_sft_2_lpi_1 , nor_5}, exit_SHFIT_RIGHT_1_sva);
  assign unequal_tmp_11 = (mux_92_cse[63]) | (mux_92_cse[62]) | (mux_92_cse[61])
      | (mux_92_cse[60]) | (mux_92_cse[59]) | (mux_92_cse[58]) | (mux_92_cse[57])
      | (mux_92_cse[56]) | (mux_92_cse[55]) | (mux_92_cse[54]) | (mux_92_cse[53])
      | (mux_92_cse[52]) | (mux_92_cse[51]) | (mux_92_cse[50]) | (mux_92_cse[49])
      | (mux_92_cse[48]) | (mux_92_cse[47]) | (mux_92_cse[46]) | (mux_92_cse[45])
      | (mux_92_cse[44]) | (mux_92_cse[43]) | (mux_92_cse[42]) | (mux_92_cse[41])
      | (mux_92_cse[40]) | (mux_92_cse[39]) | (mux_92_cse[38]) | (mux_92_cse[37])
      | (mux_92_cse[36]) | (mux_92_cse[35]) | (mux_92_cse[34]) | (mux_92_cse[33])
      | (mux_92_cse[32]) | (mux_92_cse[31]) | (mux_92_cse[30]) | (mux_92_cse[29])
      | (mux_92_cse[28]) | (mux_92_cse[27]) | (mux_92_cse[26]) | (mux_92_cse[25])
      | (mux_92_cse[24]) | (mux_92_cse[23]) | (mux_92_cse[22]) | (mux_92_cse[21])
      | (mux_92_cse[20]) | (mux_92_cse[19]) | (mux_92_cse[18]) | (mux_92_cse[17])
      | (mux_92_cse[16]) | (mux_92_cse[15]) | (mux_92_cse[14]) | (mux_92_cse[13])
      | (mux_92_cse[12]) | (mux_92_cse[11]) | (mux_92_cse[10]) | (mux_92_cse[9])
      | (mux_92_cse[8]) | (mux_92_cse[7]) | (mux_92_cse[6]) | (mux_92_cse[5]) | (mux_92_cse[4])
      | (mux_92_cse[3]) | (mux_92_cse[2]) | (mux_92_cse[1]) | (mux_92_cse[0]);
  assign if_1_case_1_equal_cse_sva_1 = (previous_motor_state_sva_dfm_2_mx0[0]) &
      (~ (previous_motor_state_sva_dfm_2_mx0[1]));
  assign unequal_tmp_12 = ~((previous_motor_state_sva_dfm_2_mx0[1]) & (~ (previous_motor_state_sva_dfm_2_mx0[0])));
  assign mux_163_nl = MUX_v_2_2_2({2'b1 , previous_motor_state_sva_dfm_6}, ~(((stop_rsc_mgc_in_wire_d
      | else_land_lpi_1_dfm_mx0) & exit_SHFIT_RIGHT_1_sva) | or_dcpl_68));
  assign previous_motor_state_sva_dfm_2_mx0 = (mux_163_nl) & (signext_2_1(~ or_dcpl_68));
  assign regs_regs_1_1_sva_dfm_4 = MUX1HOT_v_30_3_2({regs_regs_0_1_sva_dfm_2_mx0
      , regs_regs_1_1_sva_dfm_2_mx0 , regs_regs_2_1_sva_dfm_2_mx0}, {if_1_case_1_nor_6_cse
      , if_1_case_1_and_23_cse , if_1_case_1_equal_cse_sva_1});
  assign regs_regs_0_1_sva_dfm_4 = MUX1HOT_v_30_3_2({vin_1_lpi_1_dfm_mx0 , regs_regs_0_1_sva_dfm_2_mx0
      , regs_regs_1_1_sva_dfm_2_mx0}, {if_1_case_1_nor_6_cse , if_1_case_1_and_23_cse
      , if_1_case_1_equal_cse_sva_1});
  assign regs_regs_2_1_sva_dfm_4 = MUX1HOT_v_30_3_2({regs_regs_1_1_sva_dfm_2_mx0
      , regs_regs_2_1_sva_dfm_2_mx0 , regs_regs_3_1_sva_dfm_2_mx0}, {if_1_case_1_nor_6_cse
      , if_1_case_1_and_23_cse , if_1_case_1_equal_cse_sva_1});
  assign regs_regs_4_1_sva_dfm_4 = MUX1HOT_v_30_3_2({regs_regs_3_1_sva_dfm_2_mx0
      , regs_regs_4_1_sva_dfm_2_mx0 , regs_regs_5_1_sva_dfm_2_mx0}, {if_1_case_1_nor_6_cse
      , if_1_case_1_and_23_cse , if_1_case_1_equal_cse_sva_1});
  assign nl_if_1_case_1_acc_12_sdt = conv_u2u_31_32(conv_u2u_30_31(regs_regs_2_1_sva_dfm_4)
      + conv_u2u_30_31(regs_regs_3_1_sva_dfm_4)) + conv_u2u_31_32({(conv_u2u_26_27(regs_regs_5_1_sva_dfm_4[29:4])
      + 27'b1) , (regs_regs_5_1_sva_dfm_4[3:0])});
  assign if_1_case_1_acc_12_sdt = nl_if_1_case_1_acc_12_sdt[31:0];
  assign regs_regs_3_1_sva_dfm_4 = MUX1HOT_v_30_3_2({regs_regs_2_1_sva_dfm_2_mx0
      , regs_regs_3_1_sva_dfm_2_mx0 , regs_regs_4_1_sva_dfm_2_mx0}, {if_1_case_1_nor_6_cse
      , if_1_case_1_and_23_cse , if_1_case_1_equal_cse_sva_1});
  assign regs_regs_5_1_sva_dfm_4 = MUX1HOT_v_30_3_2({regs_regs_4_1_sva_dfm_2_mx0
      , regs_regs_5_1_sva_dfm_2_mx0 , vin_1_lpi_1_dfm_mx0}, {if_1_case_1_nor_6_cse
      , if_1_case_1_and_23_cse , if_1_case_1_equal_cse_sva_1});
  assign if_1_case_1_nor_6_cse = ~(unequal_tmp_12 | if_1_case_1_equal_cse_sva_1);
  assign if_1_case_1_and_23_cse = unequal_tmp_12 & (~ if_1_case_1_equal_cse_sva_1);
  assign and_stg_4_sva = ~((SHFIT_RIGHT_1_i_1_lpi_1_dfm[1]) | (SHFIT_RIGHT_1_i_1_lpi_1_dfm[0]));
  assign SHFIT_RIGHT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva
      = MUX_v_64_8_2({64'b0 , first_derivative_regs_regs_1_sva_dfm_2_mx0 , first_derivative_regs_regs_2_sva_dfm_2_mx0
      , first_derivative_regs_regs_3_sva_dfm_2_mx0 , first_derivative_regs_regs_4_sva_dfm_2_mx0
      , first_derivative_regs_regs_5_sva_dfm_2_mx0 , 64'b0 , 64'b0}, SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva);
  assign SHFIT_RIGHT_1_i_1_lpi_1_dfm = SHFIT_RIGHT_1_i_1_lpi_1 & (signext_3_1(~ sfi_if_1_case_1_equal_cse_lpi_1_dfm_1));
  assign nl_SHFIT_RIGHT_1_acc_itm = ({1'b1 , (SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva[2:1])})
      + 3'b1;
  assign SHFIT_RIGHT_1_acc_itm = nl_SHFIT_RIGHT_1_acc_itm[2:0];
  assign unequal_tmp_2 = ~((SHFIT_RIGHT_1_i_1_lpi_1_dfm[2]) & (SHFIT_RIGHT_1_i_1_lpi_1_dfm[0])
      & (~ (SHFIT_RIGHT_1_i_1_lpi_1_dfm[1])));
  assign nl_SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva = SHFIT_RIGHT_1_i_1_lpi_1_dfm
      + 3'b1;
  assign SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva = nl_SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva[2:0];
  assign sfi_if_1_case_1_equal_cse_lpi_1_dfm_1 = sfi_if_1_case_1_equal_cse_lpi_1
      | sfi_fsm_state_1_lpi_1_dfm_1;
  assign SHIFT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva = MUX_v_64_8_2({first_derivative_regs_regs_0_sva_dfm_2_mx0
      , first_derivative_regs_regs_1_sva_dfm_2_mx0 , first_derivative_regs_regs_2_sva_dfm_2_mx0
      , first_derivative_regs_regs_3_sva_dfm_2_mx0 , first_derivative_regs_regs_4_sva_dfm_2_mx0
      , 64'b0 , 64'b0 , 64'b0}, SHIFT_1_i_1_lpi_1_dfm_5_mx0 + 3'b111);
  assign SHIFT_1_i_1_lpi_1_dfm_5_mx0 = MUX_v_3_2_2({3'b101 , SHIFT_1_i_1_lpi_3},
      ~(sfi_previous_motor_state_lpi_1 | sfi_if_1_case_1_equal_cse_lpi_1_dfm_1));
  assign nl_SHIFT_1_i_1_sva_1 = conv_u2s_3_4(SHIFT_1_i_1_lpi_1_dfm_5_mx0) + 4'b1111;
  assign SHIFT_1_i_1_sva_1 = nl_SHIFT_1_i_1_sva_1[3:0];
  assign unequal_tmp_10 = (SHIFT_1_i_1_lpi_1_dfm_5_mx0[2]) | (SHIFT_1_i_1_lpi_1_dfm_5_mx0[1])
      | (SHIFT_1_i_1_lpi_1_dfm_5_mx0[0]);
  assign if_1_case_1_else_1_nand_tmp = ~((asn_sft_lpi_1_dfm_mx0[1]) & (~ (asn_sft_lpi_1_dfm_mx0[0])));
  assign asn_sft_lpi_1_dfm_mx0 = MUX_v_2_2_2({previous_motor_state_sva_dfm_2_mx0
      , asn_sft_lpi_1}, and_49_cse);
  assign first_derivative_regs_regs_4_sva_dfm_6 = MUX1HOT_v_64_3_2({first_derivative_regs_regs_4_sva_dfm_2_mx0
      , SHFIT_RIGHT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva ,
      SHIFT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva}, {(((~ SHFIT_RIGHT_1_if_else_else_and_4_tmp_1)
      & asn_sft_1_lpi_1_dfm_mx0) | ((~ SHIFT_1_if_else_else_and_3_tmp_1) & if_1_case_1_nor_m1c_1)
      | if_1_case_1_and_3_cse_1) , (SHFIT_RIGHT_1_if_else_else_and_4_tmp_1 & asn_sft_1_lpi_1_dfm_mx0)
      , (SHIFT_1_if_else_else_and_3_tmp_1 & if_1_case_1_nor_m1c_1)});
  assign first_derivative_regs_regs_0_sva_dfm_6 = MUX1HOT_v_64_3_2({first_derivative_regs_regs_0_sva_dfm_2_mx0
      , SHFIT_RIGHT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva ,
      ({{32{if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0[31]}}, if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0})},
      {(((~ SHFIT_RIGHT_1_if_else_else_and_tmp_1) & asn_sft_1_lpi_1_dfm_mx0) | (unequal_tmp_10
      & if_1_case_1_nor_m1c_1) | if_1_case_1_and_3_cse_1) , (SHFIT_RIGHT_1_if_else_else_and_tmp_1
      & asn_sft_1_lpi_1_dfm_mx0) , ((~ unequal_tmp_10) & if_1_case_1_nor_m1c_1)});
  assign nl_if_1_case_1_if_2_else_if_acc_itm = conv_s2s_32_61(if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0)
      + conv_s2s_60_61(current_position_rolling_mean_sva_dfm_4[63:4]);
  assign if_1_case_1_if_2_else_if_acc_itm = nl_if_1_case_1_if_2_else_if_acc_itm[60:0];
  assign if_1_case_1_if_2_else_slc_svs_mx0 = MUX_s_1_2_2({(if_1_case_1_if_2_else_if_acc_itm[60])
      , if_1_case_1_if_2_else_slc_svs}, is_local_maximum_land_lpi_1_dfm_1);
  assign nl_if_1_case_1_acc_26_sdt = ({1'b1 , (~ regs_regs_0_1_sva_dfm_4)}) + ({1'b1
      , (~ regs_regs_2_1_sva_dfm_4)});
  assign if_1_case_1_acc_26_sdt = nl_if_1_case_1_acc_26_sdt[30:0];
  assign nl_if_1_case_1_acc_itm = (conv_u2u_34_35(readslicef_35_34_1((conv_u2u_34_35({(conv_u2u_30_31(regs_regs_4_1_sva_dfm_4)
      + conv_u2u_29_31(if_1_case_1_acc_12_sdt[31:3])) , (if_1_case_1_acc_12_sdt[2:0])})
      + conv_u2u_33_35({(conv_u2u_31_32(conv_u2u_30_31(regs_regs_4_1_sva_dfm_4) +
      conv_u2u_30_31(regs_regs_3_1_sva_dfm_4)) + conv_u2u_31_32(conv_u2u_30_31(regs_regs_5_1_sva_dfm_4)
      + conv_u2u_29_31(regs_regs_0_1_sva_dfm_4[29:1]))) , (regs_regs_0_1_sva_dfm_4[0])}))))
      + conv_u2u_33_35({(conv_u2u_30_31(if_1_case_1_acc_26_sdt[30:1]) + conv_u2u_30_31(~
      regs_regs_1_1_sva_dfm_4)) , (if_1_case_1_acc_26_sdt[0]) , 1'b1})) + ({5'b10111
      , (~ regs_regs_1_1_sva_dfm_4)});
  assign if_1_case_1_acc_itm = nl_if_1_case_1_acc_itm[34:0];
  assign if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0 = MUX_v_32_2_2({(if_1_case_1_acc_itm[34:3])
      , if_1_case_1_slc_1_psp_1_lpi_1}, and_dcpl_2);
  assign current_position_rolling_mean_sva_dfm_4 = MUX1HOT_v_64_3_2({({34'b0 , vin_1_lpi_1_dfm_mx0})
      , (conv_s2s_61_64(readslicef_62_61_1((conv_s2s_61_62({(~ (mux_92_cse[63:4]))
      , 1'b1}) + conv_u2s_27_62({(vin_1_lpi_1_dfm_mx0[29:4]) , 1'b1})))) + mux_92_cse)
      , mux_92_cse}, {((~ unequal_tmp_11) & sfi_fsm_state_1_lpi_1_dfm_1) , (unequal_tmp_11
      & sfi_fsm_state_1_lpi_1_dfm_1) , (~ sfi_fsm_state_1_lpi_1_dfm_1)});
  assign is_local_maximum_land_lpi_1_dfm_1 = (readslicef_66_1_65((conv_s2u_65_66({first_derivative_regs_regs_4_sva_dfm_6
      , 1'b1}) + conv_s2u_65_66({(~ first_derivative_regs_regs_0_sva_dfm_6) , 1'b1}))))
      & (~((first_derivative_regs_regs_2_sva_dfm_6[63]) | (~ (first_derivative_regs_regs_3_sva_dfm_6[63]))));
  assign first_derivative_regs_regs_2_sva_dfm_6 = MUX1HOT_v_64_3_2({first_derivative_regs_regs_2_sva_dfm_2_mx0
      , SHFIT_RIGHT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva ,
      SHIFT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva}, {(((~ SHFIT_RIGHT_1_if_else_else_and_2_tmp_1)
      & asn_sft_1_lpi_1_dfm_mx0) | ((~ SHIFT_1_if_else_else_and_1_tmp_1) & if_1_case_1_nor_m1c_1)
      | if_1_case_1_and_3_cse_1) , (SHFIT_RIGHT_1_if_else_else_and_2_tmp_1 & asn_sft_1_lpi_1_dfm_mx0)
      , (SHIFT_1_if_else_else_and_1_tmp_1 & if_1_case_1_nor_m1c_1)});
  assign first_derivative_regs_regs_3_sva_dfm_6 = MUX1HOT_v_64_3_2({first_derivative_regs_regs_3_sva_dfm_2_mx0
      , SHFIT_RIGHT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva ,
      SHIFT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva}, {(((~ SHFIT_RIGHT_1_if_else_else_and_3_tmp_1)
      & asn_sft_1_lpi_1_dfm_mx0) | ((~ SHIFT_1_if_else_else_and_2_tmp_1) & if_1_case_1_nor_m1c_1)
      | if_1_case_1_and_3_cse_1) , (SHFIT_RIGHT_1_if_else_else_and_3_tmp_1 & asn_sft_1_lpi_1_dfm_mx0)
      , (SHIFT_1_if_else_else_and_2_tmp_1 & if_1_case_1_nor_m1c_1)});
  assign nl_if_1_case_1_acc_5_itm = conv_s2u_32_33(~ frame_count_sva_dfm_2_mx0) +
      33'b1011;
  assign if_1_case_1_acc_5_itm = nl_if_1_case_1_acc_5_itm[32:0];
  assign asn_sft_1_lpi_1_dfm_mx0 = MUX_s_1_2_2({if_1_case_1_equal_cse_sva_1 , asn_sft_1_lpi_1},
      and_dcpl_2);
  assign SHFIT_RIGHT_1_if_else_else_and_4_tmp_1 = (SHFIT_RIGHT_1_i_1_lpi_1_dfm[2])
      & and_stg_4_sva & unequal_tmp_2;
  assign SHIFT_1_if_else_else_and_3_tmp_1 = (SHIFT_1_i_1_lpi_1_dfm_5_mx0[2]) & (~((SHIFT_1_i_1_lpi_1_dfm_5_mx0[1])
      | (SHIFT_1_i_1_lpi_1_dfm_5_mx0[0]))) & unequal_tmp_10;
  assign if_1_case_1_nor_m1c_1 = ~(if_1_case_1_else_1_nand_tmp | asn_sft_1_lpi_1_dfm_mx0);
  assign if_1_case_1_nor_m1c_mx0 = MUX_s_1_2_2({if_1_case_1_nor_m1c_1 , if_1_case_1_nor_m1c},
      or_dcpl_4);
  assign if_1_case_1_and_3_cse_1 = if_1_case_1_else_1_nand_tmp & (~ asn_sft_1_lpi_1_dfm_mx0);
  assign SHFIT_RIGHT_1_if_else_else_and_3_tmp_1 = (~ (SHFIT_RIGHT_1_i_1_lpi_1_dfm[2]))
      & (SHFIT_RIGHT_1_i_1_lpi_1_dfm[1]) & (SHFIT_RIGHT_1_i_1_lpi_1_dfm[0]) & unequal_tmp_2;
  assign SHIFT_1_if_else_else_and_2_tmp_1 = (~ (SHIFT_1_i_1_lpi_1_dfm_5_mx0[2]))
      & (SHIFT_1_i_1_lpi_1_dfm_5_mx0[1]) & (SHIFT_1_i_1_lpi_1_dfm_5_mx0[0]) & unequal_tmp_10;
  assign SHFIT_RIGHT_1_if_else_else_and_2_tmp_1 = (~ (SHFIT_RIGHT_1_i_1_lpi_1_dfm[2]))
      & (SHFIT_RIGHT_1_i_1_lpi_1_dfm[1]) & (~ (SHFIT_RIGHT_1_i_1_lpi_1_dfm[0])) &
      unequal_tmp_2;
  assign SHIFT_1_if_else_else_and_1_tmp_1 = (~ (SHIFT_1_i_1_lpi_1_dfm_5_mx0[2]))
      & (SHIFT_1_i_1_lpi_1_dfm_5_mx0[1]) & (~ (SHIFT_1_i_1_lpi_1_dfm_5_mx0[0])) &
      unequal_tmp_10;
  assign SHFIT_RIGHT_1_if_else_else_and_tmp_1 = (~ (SHFIT_RIGHT_1_i_1_lpi_1_dfm[2]))
      & and_stg_4_sva & unequal_tmp_2;
  assign sfi_fsm_state_1_lpi_1_dfm_1 = sfi_fsm_state_1_lpi_1 | exit_SHFIT_RIGHT_1_sva;
  assign nor_5 = ~((~(fsm_state_1_sva | else_land_lpi_1_dfm_mx0)) | stop_rsc_mgc_in_wire_d);
  assign fsm_state_1_sva_dfm_2_mx0 = MUX_s_1_2_2({fsm_state_1_sva , nor_5}, exit_SHFIT_RIGHT_1_sva);
  assign if_1_and_mx0w0 = current_frame_clock_rsc_mgc_in_wire_d & (~ reg_previous_frame_clock_sva_cse);
  assign asn_sft_3_lpi_1_dfm_mx0 = MUX_s_1_2_2({asn_sft_3_lpi_1_dfm , if_1_and_mx0w0},
      exit_SHFIT_RIGHT_1_sva);
  assign SHIFT_1_if_else_else_and_4_tmp = (SHIFT_1_i_1_lpi_1_dfm_5_mx0[2]) & and_stg_2_sg1_sva
      & unequal_tmp_10;
  assign SHIFT_1_if_else_else_and_tmp = (~ (SHIFT_1_i_1_lpi_1_dfm_5_mx0[2])) & and_stg_2_sg1_sva
      & unequal_tmp_10;
  assign SHFIT_RIGHT_1_if_else_else_and_1_tmp = (~ (SHFIT_RIGHT_1_i_1_lpi_1_dfm[2]))
      & (~ (SHFIT_RIGHT_1_i_1_lpi_1_dfm[1])) & (SHFIT_RIGHT_1_i_1_lpi_1_dfm[0]) &
      unequal_tmp_2;
  assign mux1h_nl = MUX1HOT_v_2_3_2({previous_motor_state_sva_dfm_2_mx0 , 2'b1 ,
      2'b10}, {(~((if_1_case_1_if_2_else_else_if_acc_itm[61]) | if_1_case_1_if_2_else_slc_svs_mx0
      | is_local_maximum_land_lpi_1_dfm_1)) , ((if_1_case_1_if_2_else_else_if_acc_itm[61])
      & (~ if_1_case_1_if_2_else_slc_svs_mx0) & (~ is_local_maximum_land_lpi_1_dfm_1))
      , (if_1_case_1_if_2_else_slc_svs_mx0 & (~ is_local_maximum_land_lpi_1_dfm_1))});
  assign if_1_next_motor_state_lpi_1_dfm_2 = (mux1h_nl) & (signext_2_1(~ is_local_maximum_land_lpi_1_dfm_1));
  assign and_stg_2_sg1_sva = (~ (SHIFT_1_i_1_lpi_1_dfm_5_mx0[1])) & (SHIFT_1_i_1_lpi_1_dfm_5_mx0[0]);
  assign nl_if_1_case_1_if_2_else_else_if_acc_itm = conv_s2s_61_62({(current_position_rolling_mean_sva_dfm_4[63:4])
      , 1'b1}) + conv_s2s_33_62({(~ if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0) , 1'b1});
  assign if_1_case_1_if_2_else_else_if_acc_itm = nl_if_1_case_1_if_2_else_else_if_acc_itm[61:0];
  assign and_45_cse = exit_SHFIT_RIGHT_1_sva_dfm_1_mx0 & asn_sft_2_lpi_1_dfm_mx0
      & asn_sft_3_lpi_1_dfm_mx0;
  assign and_34_cse = asn_sft_2_lpi_1_dfm_mx0 & asn_sft_3_lpi_1_dfm_mx0;
  assign mux_130_nl = MUX_v_2_2_2({previous_motor_state_sva_dfm_2_mx0 , if_1_next_motor_state_lpi_1_dfm_2},
      if_1_case_1_acc_5_itm[32]);
  assign if_1_case_1_if_3_not_8 = (mux_130_nl) == previous_motor_state_sva_dfm_2_mx0;
  assign or_dcpl = ~(main_stage_0_2 & reg_exit_SHFIT_RIGHT_1_sva_dfm_5_cse);
  assign mux_37_itm = MUX_s_1_2_2({asn_sft_3_lpi_1_dfm , if_1_and_mx0w0}, exit_SHFIT_RIGHT_1_sva);
  assign mux_160_nl = MUX_s_1_2_2({asn_sft_2_lpi_1 , nor_5}, exit_SHFIT_RIGHT_1_sva);
  assign or_dcpl_4 = ~(mux_37_itm & (mux_160_nl));
  assign or_dcpl_6 = stop_rsc_mgc_in_wire_d | (~ exit_SHFIT_RIGHT_1_sva);
  assign or_dcpl_30 = or_dcpl_4 | if_1_default_mux_51_itm;
  assign and_dcpl_2 = ~(exit_SHFIT_RIGHT_1_sva | sfi_fsm_state_1_lpi_1);
  assign and_49_cse = and_dcpl_2 & (~ sfi_if_1_case_1_equal_cse_lpi_1);
  assign or_dcpl_44 = (if_1_case_1_if_3_not_8 & and_45_cse & sfi_fsm_state_1_lpi_1_dfm_1)
      | (sfi_fsm_state_1_lpi_1_dfm_1 & (~ exit_SHFIT_RIGHT_1_sva_dfm_1_mx0) & asn_sft_2_lpi_1_dfm_mx0
      & asn_sft_3_lpi_1_dfm_mx0);
  assign and_61_cse = (~ if_1_case_1_if_3_not_8) & and_45_cse;
  assign mux_tmp = MUX_s_1_2_2({if_1_case_1_else_1_or_mx0w1 , (~ (SHFIT_RIGHT_1_acc_itm[2]))},
      asn_sft_1_lpi_1_dfm_mx0);
  assign or_dcpl_52 = or_dcpl_6 | (~ else_land_lpi_1_dfm_mx0w0);
  assign and_dcpl_30 = (~ or_dcpl_6) & else_land_lpi_1_dfm_mx0w0;
  assign or_dcpl_68 = (~(((else_land_lpi_1_dfm_mx0 | stop_rsc_mgc_in_wire_d) & exit_SHFIT_RIGHT_1_sva)
      | main_stage_0_2)) | (exit_SHFIT_RIGHT_1_sva & stop_rsc_mgc_in_wire_d);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      debug3_rsc_mgc_out_stdreg_d <= 1'b0;
      debug2_rsc_mgc_out_stdreg_d <= 1'b0;
      debug1_rsc_mgc_out_stdreg_d <= 1'b0;
      motor_state_rsc_mgc_out_stdreg_d <= 2'b0;
      aelse_8_nor_itm_1 <= 1'b0;
      slc_1_itm_1 <= 1'b0;
      frame_count_sva_4 <= 32'b0;
      previous_motor_state_sva_dfm_6 <= 2'b0;
      frame_count_sva_dfm_8 <= 32'b0;
      reg_exit_SHFIT_RIGHT_1_sva_dfm_5_cse <= 1'b0;
      else_land_lpi_1_dfm <= 1'b0;
      regs_regs_5_1_sva <= 30'b0;
      regs_regs_4_1_sva <= 30'b0;
      regs_regs_3_1_sva <= 30'b0;
      regs_regs_2_1_sva <= 30'b0;
      regs_regs_1_1_sva <= 30'b0;
      regs_regs_0_1_sva <= 30'b0;
      first_derivative_regs_regs_5_sva <= 64'b0;
      first_derivative_regs_regs_4_sva <= 64'b0;
      first_derivative_regs_regs_3_sva <= 64'b0;
      first_derivative_regs_regs_2_sva <= 64'b0;
      first_derivative_regs_regs_1_sva <= 64'b0;
      first_derivative_regs_regs_0_sva <= 64'b0;
      current_position_rolling_mean_sva <= 64'b0;
      vin_1_lpi_1_dfm <= 30'b0;
      fsm_state_1_sva <= 1'b0;
      SHFIT_RIGHT_1_i_1_lpi_1 <= 3'b0;
      SHIFT_1_i_1_lpi_3 <= 3'b0;
      sfi_previous_motor_state_lpi_1 <= 1'b0;
      asn_sft_lpi_1 <= 2'b0;
      if_1_case_1_if_2_else_slc_svs <= 1'b0;
      if_1_case_1_nor_m1c <= 1'b0;
      sfi_if_1_case_1_equal_cse_lpi_1 <= 1'b0;
      asn_sft_1_lpi_1 <= 1'b0;
      if_1_case_1_slc_1_psp_1_lpi_1 <= 32'b0;
      sfi_fsm_state_1_lpi_1 <= 1'b0;
      exit_SHFIT_RIGHT_1_sva <= 1'b1;
      asn_sft_2_lpi_1 <= 1'b0;
      asn_sft_3_lpi_1_dfm <= 1'b0;
      reg_previous_frame_clock_sva_cse <= 1'b0;
      main_stage_0_2 <= 1'b0;
    end
    else begin
      if ( en ) begin
        debug3_rsc_mgc_out_stdreg_d <= MUX_s_1_2_2({aelse_8_nor_itm_1 , debug3_rsc_mgc_out_stdreg_d},
            or_dcpl);
        debug2_rsc_mgc_out_stdreg_d <= MUX_s_1_2_2({slc_1_itm_1 , debug2_rsc_mgc_out_stdreg_d},
            or_dcpl);
        debug1_rsc_mgc_out_stdreg_d <= MUX_s_1_2_2({(readslicef_33_1_32((conv_s2u_32_33(~
            frame_count_sva_4) + 33'b1011))) , debug1_rsc_mgc_out_stdreg_d}, or_dcpl);
        motor_state_rsc_mgc_out_stdreg_d <= MUX_v_2_2_2({previous_motor_state_sva_dfm_6
            , motor_state_rsc_mgc_out_stdreg_d}, or_dcpl);
        aelse_8_nor_itm_1 <= ~((first_derivative_regs_regs_2_sva_mx0[63]) | (~ (first_derivative_regs_regs_3_sva_mx0[63])));
        slc_1_itm_1 <= readslicef_66_1_65((conv_s2u_65_66({first_derivative_regs_regs_4_sva_mx0
            , 1'b1}) + conv_s2u_65_66({(~ first_derivative_regs_regs_0_sva_mx0) ,
            1'b1})));
        frame_count_sva_4 <= nl_frame_count_sva_4[31:0];
        previous_motor_state_sva_dfm_6 <= (MUX_v_2_2_2({if_1_next_motor_state_lpi_1_dfm_2
            , previous_motor_state_sva_dfm_2_mx0}, ~((~((~(exit_SHFIT_RIGHT_1_sva_dfm_1_mx0
            & (if_1_case_1_acc_5_itm[32]))) & asn_sft_2_lpi_1_dfm_mx0)) & mux_37_itm)))
            & (signext_2_1((~ mux_37_itm) | asn_sft_2_lpi_1_dfm_mx0));
        frame_count_sva_dfm_8 <= frame_count_sva_dfm_8_mx0;
        reg_exit_SHFIT_RIGHT_1_sva_dfm_5_cse <= or_2_tmp;
        else_land_lpi_1_dfm <= MUX_s_1_2_2({else_land_lpi_1_dfm_mx0w0 , else_land_lpi_1_dfm},
            or_dcpl_6);
        regs_regs_5_1_sva <= (MUX1HOT_v_30_3_2({regs_regs_5_1_sva_dfm_2_mx0 , regs_regs_5_1_sva
            , regs_regs_5_1_sva_dfm_4}, {and_96_cse , and_97_cse , or_dcpl_44}))
            & (signext_30_1(~ and_61_cse));
        regs_regs_4_1_sva <= (MUX1HOT_v_30_3_2({regs_regs_4_1_sva_dfm_2_mx0 , regs_regs_4_1_sva
            , regs_regs_4_1_sva_dfm_4}, {and_96_cse , and_97_cse , or_dcpl_44}))
            & (signext_30_1(~ and_61_cse));
        regs_regs_3_1_sva <= (MUX1HOT_v_30_3_2({regs_regs_3_1_sva_dfm_2_mx0 , regs_regs_3_1_sva
            , regs_regs_3_1_sva_dfm_4}, {and_96_cse , and_97_cse , or_dcpl_44}))
            & (signext_30_1(~ and_61_cse));
        regs_regs_2_1_sva <= (MUX1HOT_v_30_3_2({regs_regs_2_1_sva_dfm_2_mx0 , regs_regs_2_1_sva
            , regs_regs_2_1_sva_dfm_4}, {and_96_cse , and_97_cse , or_dcpl_44}))
            & (signext_30_1(~ and_61_cse));
        regs_regs_1_1_sva <= (MUX1HOT_v_30_3_2({regs_regs_1_1_sva_dfm_2_mx0 , regs_regs_1_1_sva
            , regs_regs_1_1_sva_dfm_4}, {and_96_cse , and_97_cse , or_dcpl_44}))
            & (signext_30_1(~ and_61_cse));
        regs_regs_0_1_sva <= (MUX1HOT_v_30_3_2({regs_regs_0_1_sva_dfm_2_mx0 , regs_regs_0_1_sva
            , regs_regs_0_1_sva_dfm_4}, {and_96_cse , and_97_cse , or_dcpl_44}))
            & (signext_30_1(~ and_61_cse));
        first_derivative_regs_regs_5_sva <= MUX1HOT_v_64_3_2({first_derivative_regs_regs_5_sva_dfm_2_mx0
            , ({{32{if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0[31]}}, if_1_case_1_slc_1_psp_1_lpi_1_dfm_mx0})
            , SHIFT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva},
            {(~(and_34_cse & (~((unequal_tmp_2 & asn_sft_1_lpi_1_dfm_mx0) | if_1_case_1_and_3_cse_1
            | ((~ SHIFT_1_if_else_else_and_4_tmp) & if_1_case_1_nor_m1c_mx0)))))
            , ((~ unequal_tmp_2) & asn_sft_1_lpi_1_dfm_mx0 & and_34_cse) , (SHIFT_1_if_else_else_and_4_tmp
            & if_1_case_1_nor_m1c_mx0 & and_34_cse)});
        first_derivative_regs_regs_4_sva <= first_derivative_regs_regs_4_sva_mx0;
        first_derivative_regs_regs_3_sva <= first_derivative_regs_regs_3_sva_mx0;
        first_derivative_regs_regs_2_sva <= first_derivative_regs_regs_2_sva_mx0;
        first_derivative_regs_regs_1_sva <= MUX1HOT_v_64_3_2({first_derivative_regs_regs_1_sva_dfm_2_mx0
            , SHFIT_RIGHT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva
            , SHIFT_1_if_else_else_else_slc_first_derivative_regs_regs_ctmp_sva},
            {(~(and_34_cse & (~(((~ SHFIT_RIGHT_1_if_else_else_and_1_tmp) & asn_sft_1_lpi_1_dfm_mx0)
            | ((~ SHIFT_1_if_else_else_and_tmp) & if_1_case_1_nor_m1c_mx0) | if_1_case_1_and_3_cse_1))))
            , (SHFIT_RIGHT_1_if_else_else_and_1_tmp & asn_sft_1_lpi_1_dfm_mx0 & and_34_cse)
            , (SHIFT_1_if_else_else_and_tmp & if_1_case_1_nor_m1c_mx0 & and_34_cse)});
        first_derivative_regs_regs_0_sva <= first_derivative_regs_regs_0_sva_mx0;
        current_position_rolling_mean_sva <= MUX_v_64_2_2({current_position_rolling_mean_sva_dfm_4
            , mux_92_cse}, or_dcpl_4);
        vin_1_lpi_1_dfm <= vin_1_lpi_1_dfm_mx0;
        fsm_state_1_sva <= MUX_s_1_2_2({fsm_state_1_sva_dfm_2_mx0 , (MUX_s_1_2_2({fsm_state_1_sva_dfm_2_mx0
            , (MUX_s_1_2_2({fsm_state_1_sva_dfm_2_mx0 , (MUX_s_1_2_2({fsm_state_1_sva_dfm_2_mx0
            , (~ is_local_maximum_land_lpi_1_dfm_1)}, if_1_case_1_acc_5_itm[32]))},
            exit_SHFIT_RIGHT_1_sva_dfm_1_mx0))}, asn_sft_2_lpi_1_dfm_mx0))}, mux_37_itm);
        SHFIT_RIGHT_1_i_1_lpi_1 <= MUX_v_3_2_2({SHFIT_RIGHT_1_if_else_else_else_acc_ncse_sva
            , SHFIT_RIGHT_1_i_1_lpi_1}, or_dcpl_4 | (~ if_1_default_mux_51_itm));
        SHIFT_1_i_1_lpi_3 <= MUX_v_3_2_2({(SHIFT_1_i_1_sva_1[2:0]) , SHIFT_1_i_1_lpi_3},
            if_1_case_1_else_1_nand_tmp | or_dcpl_30);
        sfi_previous_motor_state_lpi_1 <= MUX_s_1_2_2({sfi_previous_motor_state_lpi_1
            , (MUX_s_1_2_2({sfi_previous_motor_state_lpi_1 , (sfi_previous_motor_state_lpi_1
            & asn_sft_1_lpi_1_dfm_mx0)}, asn_sft_2_lpi_1_dfm_mx0))}, mux_37_itm);
        asn_sft_lpi_1 <= MUX_v_2_2_2({previous_motor_state_sva_dfm_2_mx0 , asn_sft_lpi_1},
            and_49_cse | or_dcpl_30);
        if_1_case_1_if_2_else_slc_svs <= MUX_s_1_2_2({(if_1_case_1_if_2_else_if_acc_itm[60])
            , if_1_case_1_if_2_else_slc_svs}, or_dcpl_4 | (~ exit_SHFIT_RIGHT_1_sva_dfm_1_mx0)
            | is_local_maximum_land_lpi_1_dfm_1 | (~ (if_1_case_1_acc_5_itm[32])));
        if_1_case_1_nor_m1c <= if_1_case_1_nor_m1c_mx0;
        sfi_if_1_case_1_equal_cse_lpi_1 <= MUX_s_1_2_2({sfi_if_1_case_1_equal_cse_lpi_1
            , (sfi_if_1_case_1_equal_cse_lpi_1 & (~ asn_sft_2_lpi_1_dfm_mx0))}, mux_37_itm);
        asn_sft_1_lpi_1 <= MUX_s_1_2_2({asn_sft_1_lpi_1 , (MUX_s_1_2_2({asn_sft_1_lpi_1
            , (MUX_s_1_2_2({asn_sft_1_lpi_1 , if_1_case_1_equal_cse_sva_1}, sfi_fsm_state_1_lpi_1_dfm_1))},
            asn_sft_2_lpi_1_dfm_mx0))}, mux_37_itm);
        if_1_case_1_slc_1_psp_1_lpi_1 <= MUX_v_32_2_2({(if_1_case_1_acc_itm[34:3])
            , if_1_case_1_slc_1_psp_1_lpi_1}, or_dcpl_4 | and_dcpl_2);
        sfi_fsm_state_1_lpi_1 <= sfi_fsm_state_1_lpi_1 & (~ asn_sft_3_lpi_1_dfm_mx0);
        exit_SHFIT_RIGHT_1_sva <= or_2_tmp;
        asn_sft_2_lpi_1 <= MUX_s_1_2_2({asn_sft_2_lpi_1 , (MUX_s_1_2_2({asn_sft_2_lpi_1
            , nor_5}, exit_SHFIT_RIGHT_1_sva))}, mux_37_itm);
        asn_sft_3_lpi_1_dfm <= asn_sft_3_lpi_1_dfm_mx0;
        reg_previous_frame_clock_sva_cse <= MUX_s_1_2_2({reg_previous_frame_clock_sva_cse
            , current_frame_clock_rsc_mgc_in_wire_d}, exit_SHFIT_RIGHT_1_sva);
        main_stage_0_2 <= 1'b1;
      end
    end
  end
  assign nl_frame_count_sva_4  = frame_count_sva_dfm_8_mx0 + 32'b1;

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [31:0] signext_32_1;
    input [0:0] vector;
  begin
    signext_32_1= {{31{vector[0]}}, vector};
  end
  endfunction


  function [63:0] MUX_v_64_2_2;
    input [127:0] inputs;
    input [0:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[127:64];
      end
      1'b1 : begin
        result = inputs[63:0];
      end
      default : begin
        result = inputs[127:64];
      end
    endcase
    MUX_v_64_2_2 = result;
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [63:0] signext_64_1;
    input [0:0] vector;
  begin
    signext_64_1= {{63{vector[0]}}, vector};
  end
  endfunction


  function [29:0] signext_30_1;
    input [0:0] vector;
  begin
    signext_30_1= {{29{vector[0]}}, vector};
  end
  endfunction


  function [31:0] MUX_v_32_2_2;
    input [63:0] inputs;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[63:32];
      end
      1'b1 : begin
        result = inputs[31:0];
      end
      default : begin
        result = inputs[63:32];
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [29:0] MUX1HOT_v_30_3_2;
    input [89:0] inputs;
    input [2:0] sel;
    reg [29:0] result;
    integer i;
  begin
    result = inputs[0+:30] & {30{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*30+:30] & {30{sel[i]}});
    MUX1HOT_v_30_3_2 = result;
  end
  endfunction


  function [63:0] MUX_v_64_8_2;
    input [511:0] inputs;
    input [2:0] sel;
    reg [63:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[511:448];
      end
      3'b001 : begin
        result = inputs[447:384];
      end
      3'b010 : begin
        result = inputs[383:320];
      end
      3'b011 : begin
        result = inputs[319:256];
      end
      3'b100 : begin
        result = inputs[255:192];
      end
      3'b101 : begin
        result = inputs[191:128];
      end
      3'b110 : begin
        result = inputs[127:64];
      end
      3'b111 : begin
        result = inputs[63:0];
      end
      default : begin
        result = inputs[511:448];
      end
    endcase
    MUX_v_64_8_2 = result;
  end
  endfunction


  function [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function [63:0] MUX1HOT_v_64_3_2;
    input [191:0] inputs;
    input [2:0] sel;
    reg [63:0] result;
    integer i;
  begin
    result = inputs[0+:64] & {64{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*64+:64] & {64{sel[i]}});
    MUX1HOT_v_64_3_2 = result;
  end
  endfunction


  function [33:0] readslicef_35_34_1;
    input [34:0] vector;
    reg [34:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_35_34_1 = tmp[33:0];
  end
  endfunction


  function [60:0] readslicef_62_61_1;
    input [61:0] vector;
    reg [61:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_62_61_1 = tmp[60:0];
  end
  endfunction


  function [0:0] readslicef_66_1_65;
    input [65:0] vector;
    reg [65:0] tmp;
  begin
    tmp = vector >> 65;
    readslicef_66_1_65 = tmp[0:0];
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [0:0] readslicef_33_1_32;
    input [32:0] vector;
    reg [32:0] tmp;
  begin
    tmp = vector >> 32;
    readslicef_33_1_32 = tmp[0:0];
  end
  endfunction


  function  [31:0] conv_u2u_31_32 ;
    input [30:0]  vector ;
  begin
    conv_u2u_31_32 = {1'b0, vector};
  end
  endfunction


  function  [30:0] conv_u2u_30_31 ;
    input [29:0]  vector ;
  begin
    conv_u2u_30_31 = {1'b0, vector};
  end
  endfunction


  function  [26:0] conv_u2u_26_27 ;
    input [25:0]  vector ;
  begin
    conv_u2u_26_27 = {1'b0, vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [60:0] conv_s2s_32_61 ;
    input signed [31:0]  vector ;
  begin
    conv_s2s_32_61 = {{29{vector[31]}}, vector};
  end
  endfunction


  function signed [60:0] conv_s2s_60_61 ;
    input signed [59:0]  vector ;
  begin
    conv_s2s_60_61 = {vector[59], vector};
  end
  endfunction


  function  [34:0] conv_u2u_34_35 ;
    input [33:0]  vector ;
  begin
    conv_u2u_34_35 = {1'b0, vector};
  end
  endfunction


  function  [30:0] conv_u2u_29_31 ;
    input [28:0]  vector ;
  begin
    conv_u2u_29_31 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [34:0] conv_u2u_33_35 ;
    input [32:0]  vector ;
  begin
    conv_u2u_33_35 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [63:0] conv_s2s_61_64 ;
    input signed [60:0]  vector ;
  begin
    conv_s2s_61_64 = {{3{vector[60]}}, vector};
  end
  endfunction


  function signed [61:0] conv_s2s_61_62 ;
    input signed [60:0]  vector ;
  begin
    conv_s2s_61_62 = {vector[60], vector};
  end
  endfunction


  function signed [61:0] conv_u2s_27_62 ;
    input [26:0]  vector ;
  begin
    conv_u2s_27_62 = {{35{1'b0}}, vector};
  end
  endfunction


  function  [65:0] conv_s2u_65_66 ;
    input signed [64:0]  vector ;
  begin
    conv_s2u_65_66 = {vector[64], vector};
  end
  endfunction


  function  [32:0] conv_s2u_32_33 ;
    input signed [31:0]  vector ;
  begin
    conv_s2u_32_33 = {vector[31], vector};
  end
  endfunction


  function signed [61:0] conv_s2s_33_62 ;
    input signed [32:0]  vector ;
  begin
    conv_s2s_33_62 = {{29{vector[32]}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    gradient_based_rotator
//  Generated from file(s):
//    9) $PROJECT_HOME/improved_rotator.cpp
// ------------------------------------------------------------------


module gradient_based_rotator (
  vin_rsc_z, current_frame_clock_rsc_z, start_rsc_z, stop_rsc_z, motor_state_rsc_z,
      debug1_rsc_z, debug2_rsc_z, debug3_rsc_z, clk, en, arst_n
);
  input [29:0] vin_rsc_z;
  input current_frame_clock_rsc_z;
  input start_rsc_z;
  input stop_rsc_z;
  output [1:0] motor_state_rsc_z;
  output debug1_rsc_z;
  output debug2_rsc_z;
  output debug3_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vin_rsc_mgc_in_wire_d;
  wire current_frame_clock_rsc_mgc_in_wire_d;
  wire start_rsc_mgc_in_wire_d;
  wire stop_rsc_mgc_in_wire_d;
  wire [1:0] motor_state_rsc_mgc_out_stdreg_d;
  wire debug1_rsc_mgc_out_stdreg_d;
  wire debug2_rsc_mgc_out_stdreg_d;
  wire debug3_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(30)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(1)) current_frame_clock_rsc_mgc_in_wire (
      .d(current_frame_clock_rsc_mgc_in_wire_d),
      .z(current_frame_clock_rsc_z)
    );
  mgc_in_wire #(.rscid(4),
  .width(1)) start_rsc_mgc_in_wire (
      .d(start_rsc_mgc_in_wire_d),
      .z(start_rsc_z)
    );
  mgc_in_wire #(.rscid(5),
  .width(1)) stop_rsc_mgc_in_wire (
      .d(stop_rsc_mgc_in_wire_d),
      .z(stop_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(2)) motor_state_rsc_mgc_out_stdreg (
      .d(motor_state_rsc_mgc_out_stdreg_d),
      .z(motor_state_rsc_z)
    );
  mgc_out_stdreg #(.rscid(7),
  .width(1)) debug1_rsc_mgc_out_stdreg (
      .d(debug1_rsc_mgc_out_stdreg_d),
      .z(debug1_rsc_z)
    );
  mgc_out_stdreg #(.rscid(8),
  .width(1)) debug2_rsc_mgc_out_stdreg (
      .d(debug2_rsc_mgc_out_stdreg_d),
      .z(debug2_rsc_z)
    );
  mgc_out_stdreg #(.rscid(9),
  .width(1)) debug3_rsc_mgc_out_stdreg (
      .d(debug3_rsc_mgc_out_stdreg_d),
      .z(debug3_rsc_z)
    );
  gradient_based_rotator_core gradient_based_rotator_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .current_frame_clock_rsc_mgc_in_wire_d(current_frame_clock_rsc_mgc_in_wire_d),
      .start_rsc_mgc_in_wire_d(start_rsc_mgc_in_wire_d),
      .stop_rsc_mgc_in_wire_d(stop_rsc_mgc_in_wire_d),
      .motor_state_rsc_mgc_out_stdreg_d(motor_state_rsc_mgc_out_stdreg_d),
      .debug1_rsc_mgc_out_stdreg_d(debug1_rsc_mgc_out_stdreg_d),
      .debug2_rsc_mgc_out_stdreg_d(debug2_rsc_mgc_out_stdreg_d),
      .debug3_rsc_mgc_out_stdreg_d(debug3_rsc_mgc_out_stdreg_d)
    );
endmodule



