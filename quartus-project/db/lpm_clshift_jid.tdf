--lpm_clshift CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" LPM_PIPELINE=1 LPM_SHIFTTYPE="LOGICAL" LPM_WIDTH=20 LPM_WIDTHDIST=5 clock data distance result
--VERSION_BEGIN 13.0 cbx_lpm_clshift 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 21 
SUBDESIGN lpm_clshift_jid
( 
	clock	:	input;
	data[19..0]	:	input;
	distance[4..0]	:	input;
	result[19..0]	:	output;
) 
VARIABLE 
	direction_reg[0..0] : dffe;
	pipe_wl1c[19..0] : dffe;
	aclr	: NODE;
	clken	: NODE;
	direction	: NODE;
	direction_w[1..0]	: WIRE;
	pad_w[15..0]	: WIRE;
	sbit_w[119..0]	: WIRE;
	sel_w[4..0]	: WIRE;

BEGIN 
	direction_reg[].clk = clock;
	direction_reg[].clrn = (! aclr);
	direction_reg[].d = ( direction_w[0..0]);
	direction_reg[].ena = clken;
	pipe_wl1c[].clk = clock;
	pipe_wl1c[].clrn = (! aclr);
	pipe_wl1c[].d = ((((sel_w[4..4] & (! direction_w[0..0])) & ( sbit_w[83..80], pad_w[15..0])) # ((sel_w[4..4] & direction_w[0..0]) & ( pad_w[15..0], sbit_w[99..96]))) # ((! sel_w[4..4]) & sbit_w[99..80]));
	pipe_wl1c[].ena = clken;
	aclr = GND;
	clken = VCC;
	direction = GND;
	direction_w[] = ( direction_reg[0..0].q, direction);
	pad_w[] = B"0000000000000000";
	result[19..0] = sbit_w[119..100];
	sbit_w[] = ( pipe_wl1c[].q, ((((sel_w[3..3] & (! direction_w[0..0])) & ( sbit_w[71..60], pad_w[7..0])) # ((sel_w[3..3] & direction_w[0..0]) & ( pad_w[7..0], sbit_w[79..68]))) # ((! sel_w[3..3]) & sbit_w[79..60])), ((((sel_w[2..2] & (! direction_w[0..0])) & ( sbit_w[55..40], pad_w[3..0])) # ((sel_w[2..2] & direction_w[0..0]) & ( pad_w[3..0], sbit_w[59..44]))) # ((! sel_w[2..2]) & sbit_w[59..40])), ((((sel_w[1..1] & (! direction_w[0..0])) & ( sbit_w[37..20], pad_w[1..0])) # ((sel_w[1..1] & direction_w[0..0]) & ( pad_w[1..0], sbit_w[39..22]))) # ((! sel_w[1..1]) & sbit_w[39..20])), ((((sel_w[0..0] & (! direction_w[0..0])) & ( sbit_w[18..0], pad_w[0..0])) # ((sel_w[0..0] & direction_w[0..0]) & ( pad_w[0..0], sbit_w[19..1]))) # ((! sel_w[0..0]) & sbit_w[19..0])), data[]);
	sel_w[] = ( distance[4..0]);
END;
--VALID FILE
